Problem Link - https://leetcode.com/problems/add-two-numbers/description/

Solution


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode *head=NULL;
        if(l1==NULL)
            return l2;
        else if(l2==NULL)
            return l1;
        ListNode *tmp1=l1,*tmp2=l2,*trav;
        int carry=0;
        while(tmp1!=NULL && tmp2!=NULL)
        {
            int sum=((tmp1->val+tmp2->val+carry)%10);
            carry=(tmp1->val+tmp2->val+carry)/10;
            ListNode *tmp3 = new ListNode(sum);
            if(head==NULL)
            {
                head=tmp3;
                trav=head;
            }
            else
            {
                trav->next=tmp3;
                trav=trav->next;   
            }
            tmp1=tmp1->next;
            tmp2=tmp2->next;
        }
        while(tmp1!=NULL)
        {
            int sum=((tmp1->val+carry)%10);
            carry=(tmp1->val+carry)/10;
            ListNode *tmp3 = new ListNode(sum);
            trav->next=tmp3;
            trav=trav->next;
            tmp1=tmp1->next;
        }
        while(tmp2!=NULL)
        {
            int sum=((tmp2->val+carry)%10);
            carry=(tmp2->val+carry)/10;
            ListNode *tmp3 = new ListNode(sum);
            trav->next=tmp3;
            trav=trav->next;
            tmp2=tmp2->next;
        }
        if(carry==1)
        {
            ListNode *tmp3 = new ListNode(1);
            trav->next=tmp3;
        }
        return head;
    }
};